# INSTANCES

# mongo
- name: Create instance(s)
  hosts: localhost
  connection: local
  gather_facts: no
  
  vars:
    credentials_file: ~/secret/ansible-service-account.json
    project_id: mok-project
    machine_type: e2-small
    image: projects/ubuntu-os-cloud/global/images/family/ubuntu-2004-lts
    zone: europe-north1-a
    compute_engine_default_service_account: 1032823057839-compute@developer.gserviceaccount.com

    
  tasks:
   - name: Launch mongo instance
     gcp_compute_instance:
        auth_kind: serviceaccount
        service_account_file: ~/secret/ansible-service-account.json
        name: mongo
        machine_type: "{{ machine_type }}"
        zone: "{{ zone }}"
        service_accounts:
          - email: "{{ compute_engine_default_service_account }}"
            scopes:
              - https://www.googleapis.com/auth/devstorage.read_only
        project: "{{ project_id }}"
        disks:
          - auto_delete: true
            boot: true
            initialize_params:
              source_image: "{{ image }}"
        network_interfaces:
          - access_configs:
             - name: mongo
               type: ONE_TO_ONE_NAT
     register: mongo_instance
   - name: debug
     debug:
       msg: "Mongo public IP is {{ mongo_instance.networkInterfaces[0].accessConfigs[0].natIP }}"

     
# backend
   - name: Launch backend instance
     gcp_compute_instance:
        auth_kind: serviceaccount
        service_account_file: ~/secret/ansible-service-account.json
        name: backend
        machine_type: "{{ machine_type }}"
        zone: "{{ zone }}"
        service_accounts:
          - email: "{{ compute_engine_default_service_account }}"
            scopes:
              - https://www.googleapis.com/auth/devstorage.read_only
        project: "{{ project_id }}"
        tags:
          items:
            - http-server
            - https-server
        disks:
          - auto_delete: true
            boot: true
            initialize_params:
              source_image: "{{ image }}"
        network_interfaces:
          - access_configs:
            - name: backend
              type: ONE_TO_ONE_NAT
     register: backend_instance
     
# frontend
   - name: Launch frontend instance
     gcp_compute_instance:
        auth_kind: serviceaccount
        service_account_file: ~/secret/ansible-service-account.json
        name: frontend
        machine_type: "{{ machine_type }}"
        zone: "{{ zone }}"
        service_accounts:
          - email: "{{ compute_engine_default_service_account }}"
            scopes:
              - https://www.googleapis.com/auth/devstorage.read_only
        project: "{{ project_id }}"
        tags:
          items:
            - http-server
            - https-server
        service_account_file: ~/secret/ansible-service-account.json
        disks:
          - auto_delete: true
            boot: true
            initialize_params:
              source_image: "{{ image }}"
        network_interfaces:
          - access_configs:
            - name: frontend
              type: ONE_TO_ONE_NAT
     
# DEPLOYMENTS

- name: Install docker for all
  hosts:
    - _frontend
    - _backend
    - _mongo
  become: true
  tasks:
    - name: Chace update
      apt:
        update_cache: yes
        cache_valid_time: 3600
        
    - name: Prepare docker
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        state: present
        
    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        
    - name: Repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
        update_cache: yes  
            
    - name: Install docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - python3-pip
        state: present
        
    - name: Docker-py
      pip:
        name: docker-py
        
# start mongo container
- name: Mongo container
  hosts: _mongo
  become: true
  tasks:
    - name: Pull mongo image
      docker_image:
        name: mongo
        source: pull
        
    - name: Run Mongo container
      docker_container:
        name: mongo
        image: mongo
        volumes:
          - "mongo-volume:/data/db"
        ports:
          - "27017:27017"
        
# start backend container
- name: Backend container
  hosts: _backend
  become: true
  tasks:
    - name: Get GCR token
      become: false
      shell: /snap/bin/gcloud auth print-access-token
      register: gcr_token
      
    - name: Login to GCR
      docker_login:
        username: oauth2accesstoken
        password: "{{ gcr_token.stdout }}"
        registry_url: eu.gcr.io
        
    - name: Pull realworld-backend
      docker_image:
        name: eu.gcr.io/mok-project/realworld_backend
        source: pull
        
    - name: Run backend-container
      docker_container:
        name: backend
        image: eu.gcr.io/mok-project/realworld_backend
        ports:
          - "80:3000"
        env:
          SECRET: "{{ secret }}"
          NODE_ENV: production
          MONGODB_URI: "mongodb://{{ hostvars[groups['_mongo'][0]].ansible_default_ipv4.address }}/conduit"
        
# start frontend container
- name: Frontend container
  hosts: _frontend
  become: true
  tasks:
    - name: Get GCR token
      become: false
      shell: /snap/bin/gcloud auth print-access-token
      register: gcr_token
      
    - name: Login to GCR
      docker_login:
        username: oauth2accesstoken
        password: "{{ gcr_token.stdout }}"
        registry_url: eu.gcr.io
        
    - name: Pull realworld-frontend
      docker_image:
        name: eu.gcr.io/mok-project/realworld_frontend
        source: pull
        
    - name: Run frontend-container
      docker_container:
        name: frontend
        image: eu.gcr.io/mok-project/realworld_frontend
        ports:
          - "80:4100"
        env:
          REACT_APP_API_ROOT: 'http://{{ hostvars[groups["_backend"][0]].networkInterfaces[0].accessConfigs[0].natIP }}/api'




   


